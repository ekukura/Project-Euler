#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug  6 12:35:30 2017

@author: emilykukura
"""

#Problem 8
"""
The four adjacent digits in the 1000-digit number that 
have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that 
have the greatest product. What is the value of this product?
"""

import math, time
import numpy as np

def num_digits(x):
    return math.ceil(math.log10(x))
    
def to_array(x): #order reversed, but contents of seq. of conseq. digits remains the same
    x_arr = []
    n = num_digits(x)
    for i in range(n):
        last_num = int( (x % pow(10,(i+1)))/pow(10,i) )     #pick off ones digit
        x_arr.append(last_num) #put in array
        #subtract ones digit and divide by 10 for reduced number
        x -= last_num * pow(10,i) 
        #print(x_arr, x)
    return x_arr

def solution_1(x, seqLength):
    x_arr = to_array(x)
    max_prod = 0
    
    for i in range(len(x_arr) - seqLength+1):
        cur_num_slice = x_arr[i:seqLength+i]
        cur_prod = np.prod(cur_num_slice)
        if cur_prod > max_prod:
            max_prod = cur_prod
            max_seq_list = cur_num_slice
    
    return max_prod, list(reversed(max_seq_list))

     
if __name__ == '__main__':  
     
    print(to_array(1254929))
    num = int("""
            73167176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            24219022671055626321111109370544217506941658960408
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450""".replace(" ","").replace("\n",""))
    
    #res_prelim = solution_1(num, 4)
    #print(res_prelim)
    
    start = time.time()
    res_1 = solution_1(num, 13)
    end = time.time()
    print("res_1 = {}\nTook {} seconds".format(res_1, end-start))  
    
    #Answer: 23514624000
          
        